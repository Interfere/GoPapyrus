package papyrus

import (
	"crypto/sha512"
	"math/big"
	"math/rand"
)

type Suite struct {
	N *big.Int
	g *big.Int
	k *big.Int
	r *rand.Rand
}

const (
	KeyLen = 256
)

var kGlobalN = []byte{0xac, 0x6b, 0xdb, 0x41, 0x32, 0x4a, 0x9a, 0x9b, 0xf1, 0x66, 0xde, 0x5e, 0x13, 0x89, 0x58, 0x2f, 0xaf, 0x72, 0xb6, 0x65, 0x19, 0x87, 0xee, 0x07, 0xfc, 0x31, 0x92, 0x94, 0x3d, 0xb5, 0x60, 0x50, 0xa3, 0x73, 0x29, 0xcb, 0xb4, 0xa0, 0x99, 0xed, 0x81, 0x93, 0xe0, 0x75, 0x77, 0x67, 0xa1, 0x3d, 0xd5, 0x23, 0x12, 0xab, 0x4b, 0x03, 0x31, 0x0d, 0xcd, 0x7f, 0x48, 0xa9, 0xda, 0x04, 0xfd, 0x50, 0xe8, 0x08, 0x39, 0x69, 0xed, 0xb7, 0x67, 0xb0, 0xcf, 0x60, 0x95, 0x17, 0x9a, 0x16, 0x3a, 0xb3, 0x66, 0x1a, 0x05, 0xfb, 0xd5, 0xfa, 0xaa, 0xe8, 0x29, 0x18, 0xa9, 0x96, 0x2f, 0x0b, 0x93, 0xb8, 0x55, 0xf9, 0x79, 0x93, 0xec, 0x97, 0x5e, 0xea, 0xa8, 0x0d, 0x74, 0x0a, 0xdb, 0xf4, 0xff, 0x74, 0x73, 0x59, 0xd0, 0x41, 0xd5, 0xc3, 0x3e, 0xa7, 0x1d, 0x28, 0x1e, 0x44, 0x6b, 0x14, 0x77, 0x3b, 0xca, 0x97, 0xb4, 0x3a, 0x23, 0xfb, 0x80, 0x16, 0x76, 0xbd, 0x20, 0x7a, 0x43, 0x6c, 0x64, 0x81, 0xf1, 0xd2, 0xb9, 0x07, 0x87, 0x17, 0x46, 0x1a, 0x5b, 0x9d, 0x32, 0xe6, 0x88, 0xf8, 0x77, 0x48, 0x54, 0x45, 0x23, 0xb5, 0x24, 0xb0, 0xd5, 0x7d, 0x5e, 0xa7, 0x7a, 0x27, 0x75, 0xd2, 0xec, 0xfa, 0x03, 0x2c, 0xfb, 0xdb, 0xf5, 0x2f, 0xb3, 0x78, 0x61, 0x60, 0x27, 0x90, 0x04, 0xe5, 0x7a, 0xe6, 0xaf, 0x87, 0x4e, 0x73, 0x03, 0xce, 0x53, 0x29, 0x9c, 0xcc, 0x04, 0x1c, 0x7b, 0xc3, 0x08, 0xd8, 0x2a, 0x56, 0x98, 0xf3, 0xa8, 0xd0, 0xc3, 0x82, 0x71, 0xae, 0x35, 0xf8, 0xe9, 0xdb, 0xfb, 0xb6, 0x94, 0xb5, 0xc8, 0x03, 0xd8, 0x9f, 0x7a, 0xe4, 0x35, 0xde, 0x23, 0x6d, 0x52, 0x5f, 0x54, 0x75, 0x9b, 0x65, 0xe3, 0x72, 0xfc, 0xd6, 0x8e, 0xf2, 0x0f, 0xa7, 0x11, 0x1f, 0x9e, 0x4a, 0xff, 0x73}
var kGlobalG = []byte{0x02}

func NewSuite(seed int64) *Suite {
	var suite = &Suite{}
	suite.init(seed)
	return suite
}

func (s *Suite) GenVerifier(v, password, salt []byte) {
	hv := hash(salt, password)
	X := new(big.Int)
	X.SetBytes(hv)
	VI := new(big.Int)
	VI.Exp(s.g, X, s.N)
	VI.FillBytes(v)
}

func (s *Suite) GenRandVal(p []byte) error {
	_, err := s.r.Read(p)
	return err
}

func (s *Suite) GenClientEphemeralKey(p, a []byte) {
	var ai = new(big.Int)
	ai.SetBytes(a)

	var AI = new(big.Int)
	AI.Exp(s.g, ai, s.N)
	AI.FillBytes(p)
}

func (s *Suite) GenServerEphemeralKey(p, b, v []byte) {
	var bi = new(big.Int)
	bi.SetBytes(b)

	var vi = new(big.Int)
	vi.SetBytes(v)

	var tmp = new(big.Int)
	tmp.Mul(s.k, vi)

	var KV = new(big.Int)
	KV.Mod(tmp, s.N)

	tmp.Exp(s.g, bi, s.N)
	tmp.Add(tmp, KV)

	var BI = new(big.Int)
	BI.Mod(tmp, s.N)
	BI.FillBytes(p)
}

func (s *Suite) GenServerSessionKey(b, A, B, v []byte) []byte {
	bi := new(big.Int)
	bi.SetBytes(b)
	AI := new(big.Int)
	AI.SetBytes(A)
	vi := new(big.Int)
	vi.SetBytes(v)
	si := new(big.Int)
	tmp := new(big.Int)

	u := hash(A, B)
	si.SetBytes(u)
	tmp.Exp(vi, si, s.N)
	si.Mul(tmp, AI)
	si.Mod(si, s.N)

	tmp.Exp(si, bi, s.N)
	sb := make([]byte, KeyLen)
	tmp.FillBytes(sb)
	return hash(sb, nil)
}

func (s *Suite) GenClientSessionKey(a, A, B, p, salt []byte) []byte {
	ai := new(big.Int)
	ai.SetBytes(a)
	BI := new(big.Int)
	BI.SetBytes(B)
	xi := new(big.Int)
	ui := new(big.Int)
	tmp := new(big.Int)

	u := hash(A, B)
	x := hash(salt, p)
	ui.SetBytes(u)
	xi.SetBytes(x)

	tmp.Mul(ui, xi)
	ui.Add(ai, tmp)

	tmp.Exp(s.g, xi, s.N)
	xi.Mul(s.k, tmp)
	xi.Sub(BI, xi)
	xi.Mod(xi, s.N)

	tmp.Exp(xi, ui, s.N)

	sb := make([]byte, KeyLen)
	tmp.FillBytes(sb)
	return hash(sb, nil)
}

func (s *Suite) GenClientSessionKeyProof(l, salt, A, B, key []byte) []byte {
	NI := new(big.Int)
	NI.SetBytes(hash(kGlobalN))
	GI := new(big.Int)
	GI.SetBytes(hash(kGlobalG))

	IV := new(big.Int)
	IV.Xor(NI, GI)

	iv := make([]byte, 64)
	IV.FillBytes(iv)

	return hash(iv, hash(l), salt, A, B, key)
}

func (s *Suite) GenServerSessionKeyProof(A, clientProof, key []byte) []byte {
	return hash(A, clientProof, key)
}

func (s *Suite) init(seed int64) {
	s.N = new(big.Int)
	s.N.SetBytes(kGlobalN)
	s.g = new(big.Int)
	s.g.SetBytes(kGlobalG)
	s.k = new(big.Int)
	s.k.SetBytes(calculateK())
	s.r = rand.New(rand.NewSource(seed))
}

func calculateK() []byte {
	return hash(kGlobalN, kGlobalG)
}

func hash(as ...[]byte) []byte {
	ctx := sha512.New()
	for val := range as {
		ctx.Write(as[val])
	}

	return ctx.Sum(nil)
}
